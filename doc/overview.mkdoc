
@section TPH {Overview}

  Upipe provides an extensive set of header files, to be used by pipes and
  applications. Applications will also generally want to link with optional
  libraries, which allow to create and manage some core data structures.

  @section T {Data structures}

    Upipe's data structures can be classified into five groups:

    @section {Core structures}

      Core structures provide services for all other groups:

      @list

        @item atomic operations with or without locks (@ref uatomic_uint32_t)
        @item reference counters (@ref urefcount)
        @item chained lists (@ref uchain) and rings allowing pointer tagging (@ref uring)
        @item lock-less LIFOs (@ref ulifo) without thread limitations
        @item lock-less FIFOs (@ref ufifo) without thread limitations
        @item lock-less buffer queues (@ref uqueue) without thread limitations
        @item lock-less buffer pools (@ref upool) without thread limitations
        @item lock-less exclusive access to non-reentrant resources (@ref udeal)
        @item blocking exclusive access to non-reentrant resources (@ref umutex)
        @item objects to pass event information between threads (@ref ueventfd)
        @item dictionaries storing key/value pairs (@ref udict)
        @item memory allocation with or without pools (@ref umem)
        @item access to monotonic or real-time system clock (@ref uclock)

      @end list

    @end section

    @section {Buffer management}

      Buffer management structures define how data is carried across inside a pipeline and are handled by @ref ubuf and associated managers. These structures typically point to a shared, reference counted area maintained by the manager. Upipe natively supports three types of buffers, each with a dedicated API to access and modify data :

      @list

        @item blocks (arbitrary octet content with arbitrary and variable size), typically used for encoded data: @ref ubuf_block_alloc ; the API supports windowing and resizing blocks, as well as merging and cutting out with zero-copy and copy-on-write semantics.
        @item pictures, defined by their chromatic planes, pixel sizes and subsampling, with arbitrary width and height: @ref ubuf_pic_alloc.
        @item sounds, in planar or packed formats: @ref ubuf_sound_alloc.

      @end list

      Pipes and applications however do not manipulate @ref ubuf directly, but @ref uref, which is composed of a pointer to @ref ubuf and a pointer to @ref udict. The dictionary allows to associate arbitrary attributes to the @ref ubuf.

      An attribute is defined by a category, a name, a type and a value. Available types are:

      @list

        @item opaque: stores a buffer of an arbitrary length
        @item string: stores a string terminated by \0
        @item void: doesn't store anything but the presence or absence of the attribute (flag)
        @item bool: stores a true or false value
        @item small_unsigned: stores a uint8_t
        @item small_int: stores an int8_t
        @item unsigned: stores a uint64_t
        @item int: stores an int64_t
        @item rational: stores a @ref urational
        @item float: stores a double

      @end list

      The standard Upipe distribution provides managers for block and picture formats, relying on application memory allocation (malloc). They in turn use the @ref umem_mgr facility to allocate buffer spaces.

    @end section

    @section {Pipes}

      Pipes are provided by specialized modules, possibly delivered by third-parties. A @ref upipe may expose input and control methods (with standard and custom commands), and would typically take data from its input, process it and output it, possibly using a different buffer, to its output. Functions from a pipe may only be called from a single thread, so locking and reentrancy isn't required.

      When created, pipes are passed one structure for logging and sending exceptions (@ref uprobe) to the parent code upon certain events (end of file, fatal error, new flow, etc.), and optional arguments, in particular, for pipes that aren't sources, a flow definition packet of type @ref uref describing the input. Pipe allocation is performed with @ref upipe_void_alloc or @ref upipe_flow_alloc, depending whether the pipe requests a flow definition packet. A few pipes may also provide their own specific allocator.

      The standard Upipe distribution currently contains the following pipe types (though third-party modules may also be used):

      @table 3

        @item API name @item description @item link with

        @item @ref upipe_fsrc_mgr_alloc @item source pipe opening for reading a file or special file characterized by its path @item @tt -lupipe-modules
        @item @ref upipe_fsink_mgr_alloc @item sink pipe opening for writing a file or special file characterized by its path @item @tt -lupipe-modules
        @item @ref upipe_udpsrc_mgr_alloc @item source pipe opening for reading a UDP socket @item @tt -lupipe-modules
        @item @ref upipe_udpsink_mgr_alloc @item sink pipe opening for writing a UDP socket @item @tt -lupipe-modules
        @item @ref upipe_multicat_sink_mgr_alloc @item sink pipe opening for writing a directory in a manner compatible with multicat @item @tt -lupipe-modules
        @item @ref upipe_dup_mgr_alloc @item split pipe allowing to duplicate all input packets to several outputs @item @tt -lupipe-modules
        @item @ref upipe_idem_mgr_alloc @item linear pipe outputting packets identically @item @tt -lupipe-modules
        @item @ref upipe_qsrc_mgr_alloc (also note @ref upipe_qsrc_alloc) @item source pipe opening a thread-safe queue with one or more qsink pipes @item @tt -lupipe-modules
        @item @ref upipe_qsink_mgr_alloc @item sink pipe sending buffers to a queue opened by a qsrc pipe @item @tt -lupipe-modules
        @item @ref upipe_null_mgr_alloc @item sink pipe destroying all input buffers @item @tt -lupipe-modules
        @item @ref upipe_xfer_mgr_alloc (also note @ref upipe_xfer_alloc) @item pipe manager allowing to attach another pipe to a given upump_mgr running in a different thread @item @tt -lupipe-modules
        @item @ref upipe_pthread_xfer_mgr_alloc @item pipe manager creating a pthread and allowing to attach another pipe to the remote upump_mgr @item @tt -lupipe-pthread
        @item @ref upipe_wsrc_mgr_alloc (also note @ref upipe_wsrc_alloc) @item pipe manager allowing to deport a source pipe to a different thread @item @tt -lupipe-modules
        @item @ref upipe_wlin_mgr_alloc (also note @ref upipe_wlin_alloc) @item pipe manager allowing to deport a linear pipe to a different thread @item @tt -lupipe-modules
        @item @ref upipe_wsink_mgr_alloc (also note @ref upipe_wsink_alloc) @item pipe manager allowing to deport a sink pipe to a different thread @item @tt -lupipe-modules
        @item @ref upipe_trickp_mgr_alloc @item pipe facilitating trick play operations @item @tt -lupipe-modules
        @item @ref upipe_even_mgr_alloc @item pipe evening the start and end of a stream @item @tt -lupipe-modules
        @item @ref upipe_skip_mgr_alloc @item pipe skipping the beginning of each uref @item @tt -lupipe-modules
        @item @ref upipe_agg_mgr_alloc @item pipe aggregating several urefs into one @item @tt -lupipe-modules
        @item @ref upipe_setflowdef_mgr_alloc @item pipe setting given attributes on incoming flow definitions @item @tt -lupipe-modules
        @item @ref upipe_setattr_mgr_alloc @item pipe setting given attributes on all incoming buffers @item @tt -lupipe-modules
        @item @ref upipe_setrap_mgr_alloc @item pipe setting attribute k.systime_rap on all incoming buffers @item @tt -lupipe-modules
        @item @ref upipe_nodemux_mgr_alloc @item pipe creating timestamps for single streamps @item @tt -lupipe-modules
        @item @ref upipe_noclock_mgr_alloc @item pipe creating system timestamps for off-line streamps @item @tt -lupipe-modules
        @item @ref upipe_genaux_mgr_alloc @item pipe generating multicat-style auxiliary blocks @item @tt -lupipe-modules
        @item @ref upipe_multicat_sink_mgr_alloc @item sink pipe generating multicat-style directories @item @tt -lupipe-modules
        @item @ref upipe_avfsrc_mgr_alloc @item source pipe opening for reading a URL and using libavformat @item @tt -lupipe-av
        @item @ref upipe_avcdec_mgr_alloc @item linear pipe decoding a video or audio flow using libavcodec @item @tt -lupipe-av
        @item @ref upipe_avcenc_mgr_alloc @item linear pipe encoding a video or audio flow using libavcodec @item @tt -lupipe-av
        @item @ref upipe_sws_mgr_alloc @item linear pipe scaling a flow of pictures using libswscale @item @tt -lupipe-sws
        @item @ref upipe_sws_thumbs_mgr_alloc @item linear pipe building a mosaic of thumbnails out of a picture flow @item @tt -lupipe-swr
        @item @ref upipe_swr_mgr_alloc @item linear pipe resampling a flow of sound with libswresample @item @tt -lupipe-sws
        @item @ref upipe_ts_demux_mgr_alloc @item split pipe demultiplexing a TS stream (also features lots of subpipes) @item @tt -lupipe-ts
        @item @ref upipe_ts_mux_mgr_alloc @item join pipe multiplexing a TS stream (also features lots of subpipes) @item @tt -lupipe-ts
        @item @ref upipe_mpgaf_mgr_alloc @item linear pipe gathering MPEG-1 and MPEG-2 audio (including AAC ADTS) streams into frames @item @tt -lupipe-framers
        @item @ref upipe_mpgvf_mgr_alloc @item linear pipe gathering MPEG-1 and MPEG-2 video streams into frames @item @tt -lupipe-framers
        @item @ref upipe_h264f_mgr_alloc @item linear pipe gathering MPEG-4 AVC video streams into frames @item @tt -lupipe-framers
        @item @ref upipe_a52f_mgr_alloc @item linear pipe gathering A52 audio streams into frames @item @tt -lupipe-framers
        @item @ref upipe_telxf_mgr_alloc @item linear pipe gathering teletext streams into frames @item @tt -lupipe-framers
        @item @ref upipe_dvbsubf_mgr_alloc @item linear pipe gathering DVB subtitling streams into frames @item @tt -lupipe-framers
        @item @ref upipe_vtrim_mgr_alloc @item pipe trimming dead frames off a video stream @item @tt -lupipe-framers
        @item @ref upipe_ffmt_mgr_alloc @item linear pipe transforming the format into another specified (potentially for an encoder) @item @tt -lupipe-filters
        @item @ref upipe_fdec_mgr_alloc @item linear pipe decoding a stream @item @tt -lupipe-filters
        @item @ref upipe_fenc_mgr_alloc @item linear pipe encoding a stream @item @tt -lupipe-filters
        @item @ref upipe_filter_blend_mgr_alloc @item linear pipe deinterlacing pictures using a blending algorithm @item @tt -lupipe-filters
        @item @ref upipe_x264_mgr_alloc @item linear pipe encoding to MPEG-4 AVC using libx264 @item @tt -lupipe-x264
        @item @ref upipe_glx_sink_mgr_alloc @item sink pipe displaying picture on a GLX output @item @tt -lupipe-gl

      @end table

      Data is fed into a pipe using @ref upipe_input. The @ref uref argument then belongs to the callee and shouldn't be used any longer. There is an additional @ref upump argument that points to the pump that generated the buffer (or NULL if unavailable).

      The generic @ref upipe_control call provides the application with an interface to modify the pipe's property. The counterpart of this function is provided by @ref uprobe, which allows the pipe to send messages to the application. It is possible to build upon this messaging system to dynamically take actions on the pipe or the pipeline. All parameters to @ref upipe_control belong to the caller. All parameters sent by subpipes via probes also belong to the subpipe. The standard Upipe distribution currently contains the following catchers:

      @table 3

        @item API name @item description @item link with

        @item @ref uprobe_stdio_alloc @item print all log messages to a file stream @item @tt -lupipe
        @item @ref uprobe_pfx_alloc @item prefix all log messages with the given name @item @tt -lupipe
        @item @ref uprobe_upump_mgr_alloc @item give a common upump manager to pipes requiring one @item @tt -lupipe
        @item @ref uprobe_pthread_upump_mgr_alloc @item give a upump manager specific to each thread to pipes requiring one @item @tt -lupipe-pthread
        @item @ref uprobe_uref_mgr_alloc @item give a uref manager to pipes requiring one @item @tt -lupipe
        @item @ref uprobe_uclock_alloc @item give a uclock to pipes requiring one @item @tt -lupipe
        @item @ref uprobe_ubuf_mem_alloc @item allocate and give a ubuf manager to pipes that require one @item @tt -lupipe
        @item @ref uprobe_ubuf_mem_pool_alloc @item allocate and give a ubuf manager to pipes that require one, and recycle existing ubuf managers @item @tt -lupipe
        @item @ref uprobe_selflow_alloc @item select flows according to criteria @item @tt -lupipe
        @item @ref uprobe_dejitter_alloc @item dejitter packets coming from a network by averaging reference clocks @item @tt -lupipe
        @item @ref uprobe_xfer_alloc @item forward probes from one thread to another, in conjunction with @ref upipe_xfer_alloc @item @tt -lupipe

      @end table

      In Upipe's design, decision taking happens inside probes, while execution is done in pipes.

      Control commands and pipes are classified (that is, enum values are prepended with a prefix) into 7 categories:

      @list

        @item generic: commands and probes which can apply to any type of pipe (no prefix)
        @item source: for pipes that have no input, but rely instead on external events to retrieve incoming data
        @item join: for pipes that have several inputs, such as a mux
        @item split: for pipes that have several outputs, such as a demux
        @item sink: for pipes that have no output and may rely on external events
        @item void: for pipes that have neither input nor output (such a pipe may be used internally to create other pipes)
        @item pipe type-specific commands and probes which must be prefixed with the short name of the pipe

      @end list

      As a convenience, the Upipe distribution provides a number of "helper" macros which usually manage internal structures and control commands:

      @table 2

        @item helper macro @item description

        @item @ref #UPIPE_HELPER_UPIPE @item very basic helper providing the @tt {upipe_foo_from_upipe} and @tt {upipe_foo_to_upipe} functions on which most helpers rely
        @item @ref #UPIPE_HELPER_ALLOC @item helper providing allocation functions for a custom allocator
        @item @ref #UPIPE_HELPER_VOID @item helper for pipes which require no argument to their allocation function
        @item @ref #UPIPE_HELPER_FLOW @item helper for pipes which require a flow definition packet to be passed as argument to their allocation function
        @item @ref #UPIPE_HELPER_UREF_MGR @item helper for pipes which require a uref manager
        @item @ref #UPIPE_HELPER_UPUMP_MGR @item helper for pipes which require a upump manager
        @item @ref #UPIPE_HELPER_UPUMP @item helper for pipes which rely on external events
        @item @ref #UPIPE_HELPER_UCLOCK @item helper for pipes which requires a uclock
        @item @ref #UPIPE_HELPER_OUTPUT @item helper for the management of the output
        @item @ref #UPIPE_HELPER_UBUF_MGR @item helper for the management of the ubuf manager for the output
        @item @ref #UPIPE_HELPER_OUTPUT_SIZE @item helper for pipes outputting data in chunks of a configuration size
        @item @ref #UPIPE_HELPER_INPUT @item helper for pipes having an input, which need to block input pumps and buffer urefs
        @item @ref #UPIPE_HELPER_UREF_STREAM @item helper for pipes reading data octet by octet, for instance to constitute packets or frames
        @item @ref #UPIPE_HELPER_SUBPIPE @item helper for split pipes and join pipes to manage their subpipes
        @item @ref #UPIPE_HELPER_SYNC @item helper for pipes that wish to tell when the signal is acquired or lost
        @item @ref #UPIPE_HELPER_ICONV @item helper for pipes using the biTStream library and needing to convert strings
        @item @ref #UPIPE_HELPER_INNER @item helper for pipes using inner pipes
        @item @ref #UPIPE_HELPER_UPROBE @item helper for pipes using inner probes
        @item @ref #UPIPE_HELPER_BIN_INPUT @item helper for bin pipes (that incorporate a sub-pipeline of several pipes) dealing with the input of the bin
        @item @ref #UPIPE_HELPER_BIN_OUTPUT @item helper for bin pipes (that incorporate a sub-pipeline of several pipes) dealing with the output of the bin
        @item @ref #UPROBE_HELPER_UPROBE @item very basic helper providing the @tt {uprobe_foo_from_uprobe} and @tt {uprobe_foo_to_uprobe} functions on which most helpers rely
        @item @ref #UPROBE_HELPER_ALLOC @item helper providing easy probe allocation and deallocation

      @end table

      Strictly speaking, a @ref upipe object has at most one input and one output (and possibly none). Split and join pipes are implemented using subpipes: the main split (resp. join) pipe is a sink (resp. a source), and each output (resp. input) requires allocating a source (resp. sink) subpipe using @ref upipe_void_alloc_sub or @ref upipe_flow_alloc_sub, depending whether the subpipe requests a flow definition. In a split pipe, outputs are configured by allocating output subpipes; however data is fed into the main pipe. In a join pipe, data is input using @ref upipe_input on each input subpipe; however outputs are configured on the main pipe. The caller must therefore keep a constellation of objects, not only the main pipe but also all the subpipes. Outputs (resp. inputs) are closed by calling @ref upipe_release on the related subpipe.

    @end section

    @section {External events}

      Source pipes and sink pipes (but not exclusively) rely on external events to retrieve or dispatch data. For instance, one may want to wait on a UDP socket for packets. Or to wait until a system pipe (mkfifo) can be written again. Or more simply, wait for a timeout.

      Pipes which need those interactions can create pumps with the built-in primitives. The @ref upump abstraction layer then maps the events to the API of the event loop which is used by the application. It supports the following types of events:

      @list

        @item idlers are executed whenever there is nothing else to do: @ref upump_alloc_idler
        @item timers are executed after a given timeout: @ref upump_alloc_timer
        @item read (resp. write) file descriptor watchers are executed whenever data is ready to be read from (resp. written to) a file descriptor: @ref upump_alloc_fd_read (resp. @ref upump_alloc_fd_write)

      @end list

      It is expected that more event types get added in the future, especially for Microsoft Windows(tm)-specific objects. Some core objects, which require being able to wait on a condition, propose their own API to allocate an adequate upump (@ref uqueue_upump_alloc_pop or @ref udeal_upump_alloc). In turn, they rely on the @ref ueventfd object provided by Upipe.

      A sink pipe which can no longer write to its output may block the source pump (passed to @ref upipe_input) using @ref upump_blocker_alloc. A call-back must be provided, which will be called upon the destruction of the source pump.

      Upipe currently provides abstraction layers for these event loops:

      @table 3

        @item event loop @item API @item link with

        @item libev @item @ref upump_ev_mgr_alloc @item @tt -lupump-ev -lev
        @item libecore @item @ref upump_ecore_mgr_alloc @item @tt -lupump-ecore -lecore

      @end table

    @end section

    @section {Internal events}

      Buffer management structures are allocated on the fly, depending on the needs of the pipes. However, some negotiation may take place, because downstream pipes may have specific requirements, such as the alignement of data, or even a custom ubuf manager required by an external library. The process to ask for buffer management structures is therefore as follows:

      @list

        @item The pipe creates a @ref urequest. For some request types, an additional uref is necessary.
        @item The pipe registers the request on its output. The standard helper @ref #UPIPE_HELPER_OUTPUT provides functions to deal with this.
        @item When an output is connected to the pipe, or when the output is changed, the request is automatically registered to the new output.
        @item The request is forwarded from pipe to pipe down to the sink. If a pipe has specific requirements such as alignement, it may modify the request.
        @item A sink pipe (or logical sink, for instance when a pipe changes the format so much that a new ubuf manager will be used) either provides the data structures itself, or throws the request as a probe event using @ref upipe_throw_provide_request to ask for the required data structures.
        @item The call-back passed to the request is called, and the internal event bubbles upstream until it reaches the source of the request.

      @end list

      Thus, any change in the pipeline triggers a renegotiation of data structures. In a multi-threaded application, the pipes providing standard queues or workers have the ability to forward the requests downstream, and the replies upstream. However the reply is asynchronous, and the source pipe must not expect to receive the data structures immediately. It must buffer the packets (for instance using @ref #UPIPE_HELPER_INPUT) until the reply is received. If the pipe can really not cope with the additional delay, it may throw the @ref upipe_throw_provide_request to get an immediate reply, which may be adjusted later. This behaviour is however discouraged.

      There are four types of requests, and Upipe provides helpers to deal with them:

      @table 3

        @item type @item function @item helper

        @item @ref UREQUEST_UREF_MGR @item @ref urequest_init_uref_mgr @item @ref #UPIPE_HELPER_UREF_MGR
        @item @ref UREQUEST_FLOW_FORMAT @item @ref urequest_init_flow_format @item @ref #UPIPE_HELPER_FLOW_FORMAT
        @item @ref UREQUEST_UBUF_MGR @item @ref urequest_init_ubuf_mgr @item @ref #UPIPE_HELPER_UBUF_MGR
        @item @ref UREQUEST_UCLOCK @item @ref urequest_init_uclock @item @ref #UPIPE_HELPER_UCLOCK

      @end table

    @end section

    @section {Structure dependencies}

    The following graph depicts dependency relationships between structures (dashed lines are optional):

    @image dependencies.png

    @end section

  @end section

  @section T {Managers}

    To deal with structures efficiently, Upipe has a notion of "managers", which are similar to factories in object-oriented programming. Consequently, @ref ubuf are created by a @ref ubuf_mgr, @ref udict by @ref udict_mgr, @ref uref by @ref uref_mgr, @ref upump by @ref upump_mgr and @ref upipe by @ref upipe_mgr. Managers typically deal with memory pools or hardware resources such as access to video memory or hardware decoding.

    Upipe provides standard implementations of @ref ubuf_mgr (for blocks and pictures), @ref udict_mgr, @ref umem_mgr and @ref uref_mgr in the libupipe library (link with -lupipe).

    The @ref upump_mgr implementations are supplied by dedicated, API-specific libraries such as libupump-ev. Finally, @ref upipe_mgr managers allow to create the pipes themselves and are either provided by the libupipe-modules library for standard pipes, or by third-party libraries.

    To instanciate managers it is necessary to link with some libraries; however there is no dependency associated with the use of the children structures @ref ubuf, @ref uref and @ref upump, as all code is either provided by inline functions or function pointers. Libraries providing implementations of @ref upipe_mgr and @ref upipe usually do not depend on libupipe.

    Upon initialization, a new pipe may be passed the managers for its @ref uref, @ref ubuf and @ref upump structures, if it requires to create them. If it has no need for a manager (for instance it just changes an attribute to all uref structures passing by), then it need not be passed.

  @end section

  @section T {Flows}

    The movement of buffers between the input and output of a pipe is called a flow. Pipes generally expect some parameters describing the flow; these are called a flow definition. A flow definition packet is a @ref uref pointing to a @ref udict with key/value pairs. Standard flow definitions are provided for block (@ref uref_block_flow_alloc_def), picture (@ref uref_pic_flow_alloc_def) and sound (@ref uref_sound_flow_alloc_def) formats.

    The input flow definition is set on a pipe using @ref upipe_set_flow_def. It may be changed at any time, but the pipe may deny it by returning an error if it considers it is too big a change; by convention, pipes only allow it if it doesn't require a full reset of the pipe's state.

    Some pipes (filters) may also require a flow definition describing the requested output, for instance to change picture format. In that case the output flow definition packet is passed on allocation using @ref upipe_flow_alloc instead of @ref upipe_void_alloc. When a pipe changes the flow definition on its output, it must call @ref upipe_set_flow_def on the output pipe.

    It is useful to note that a flow definition packet is actually a patchwork of attributes with different purposes:

      @list

        @item attributes which define the format of the buffers, such as the number of planes or chroma subsampling
        @item attributes which describe several properties useful for the display or processing of the flow, such as aspect ratio, fps, bitrate, sample rate, etc.
        @item attributes which may have no relation with the data themselves but are useful to choose between elementary streams, such as the language, program name, event information, etc.

      @end list

    It should therefore be considered quite standard to have frequent flow definition updates, and most pipes won't probably feel the difference.

  @end section

  @section T {Clocks}

    All dates in Upipe are represented, by convention, as ticks of a 27 MHz clock. The origin and pace of the clock depends on the variation of the date. There are three date variations stored in @ref uref:

    @table 3

      @item date variation @item scope @item description

      @item sys @item whole stream @item Uses the same scale as @ref uclock_now. The date is represented in system time. On live streams, incoming packets should be stamped with this clock, and outgoing packets (for presentation or streaming) should be scheduled according to it. A fictitious system time may be necessary even for some file to file conversion, as it is the only clock that is stream-wide.

      @item orig @item program @item Carries the dates coded in the incoming stream, with the same origin, scaled to 27 MHz (if necessary). Its only use is for remultiplexing a stream with the exact same timestamps. A demux should typically retrieve this value.

      @item prog @item program @item Is based on the orig clock, but the origin may be changed to make sure that the dates are always monotonically increasing, without large gaps. A demux should typically infer this clock, and a mux should use it to write its timestamps. @ref upipe_trickp_mgr_alloc is also able to derive the system clock from the prog clock.

    @end table

    Please note that the three clocks may drift slightly. For instance, a 25 progressive frames per second stream should have a frame exactly every 40 ms according to the orig and prog clocks, but in the sys clock it may drift to 39 or 41 ms if the sender's clock is too fast or too slow. Also, when reading files, the trickplay module may create slow motion or fast forward effects by changing the pace of the sys clock.

    In a @ref uref, every date variation has a semantic attached to it (@ref uref_date_type). There are three date types, which are used in different parts of the pipeline to represent different events:

    @table 3

      @item date type @item uref domain @item description

      @item Clock reference (cr) @item block data @item Represents the date of reception (resp. emission) of a low-level packet. It does not necessarily have a relationship with actual video or audio data. When dealing with live processing, clock references should be set on all packets entering a demux, and on all packets leaving a mux.

      @item Decoding timestamp (dts) @item encoded frame @item Represents the theorical date of decoding of an encoded audio or video frame. It must be set on all frames leaving a demux, and all frames entering a mux.

      @item Presentation timestamp (pts) @item raw frame @item Represents the theorical date of presentation of an audio or video frame. It must be set on all frames leaving a decoder, and all frames entering an encoder.
    @end table

    A @ref uref contains only one date type for each date variation. The date type should be cr for block data (input of demux and output of mux), dts for encoded frames (output of demux and input of mux), and pts for raw frames (output of decoder and input of encoder). This is called the "base". Dates are set using @ref uref_clock_set_cr_prog, @ref uref_clock_set_dts_prog, @ref uref_clock_set_pts_prog, etc. Note that each call to uref_clock_set_XXX_prog will overwrite previous values for prog and rebase the prog date. It is possible to set the delay between the dts and pts using @ref uref_clock_set_dts_pts_delay, and between the cr and dts using @ref uref_clock_set_cr_dts_delay (typically the vbv delay). This makes it possible for a demux to set both dts and pts when it is available. @ref uref_clock_rebase_dts_prog may be used by the decoder to rebase the prog date using dts. @ref uref_clock_rebase_cr_sys would typically be used in a mux.

    The @ref uref also contains the sys date of the last random access point. It can be retrieved (resp. set) with @ref uref_clock_get_rap_sys (resp. @ref uref_clock_set_rap_sys).

  @end section

  @section T {Threads}

    Upipe objects do not natively deal with threads. Multithreading is supposed to be the prerogative of the application, or at least of very high level bin pipes (an exception being the libraries which themselves take advantage of multithreading, such as FFmpeg/libav and x264). However multithreading in Upipe is built on several levels:

    @list

      @item The core structures provide thread-safe queues (@ref uqueue) and pools (@ref upool).
      @item Two low-level pipes, @ref upipe_qsrc_mgr_alloc and @ref upipe_qsink_mgr_alloc, allow to bridge @ref uref from one thread to another. In that case, each thread runs its own upump manager, which is passed to the pipes running in it.
      @item One low-level pipe, @ref upipe_xfer_mgr_alloc, allows to transfer a single pipe to a upump manager running in a different thread.
      @item Three high-level bin pipes allow to create a thread and to transfer there whole subpipelines, while setting up appropriate queues to transfer urefs in and out of the subpipeline.

    @end list

    The common method to use worker threads is the following:

    @list

      @item A worker thread and transfer manager is created with the manager adapted to the threading system (for POSIX systems, @ref upipe_pthread_xfer_mgr_alloc). You have to pass functions to initialize, run and clean the upump manager attached to the worker thread.
      @item A worker manager is created using the transfer manager. It allows to transfer whole subpipelines to the thread. You must choose the correct type of worker, whether the subpipeline is a source (@ref upipe_wsrc_mgr_alloc), a sink (@ref upipe_wsink_mgr_alloc) or a linear subpipeline (@ref upipe_wlin_mgr_alloc). This controls which queues will be set up for the input and/or output of the subpipeline.
      @item The pipes that are to be transferred to the subpipeline are created normally in the main thread. However, some pipes may request a upump manager and start working immediately, therefore pumps would be created with the wrong upump manager. To avoid that, it is necessary to freeze the upump manager of the main thread by calling @ref uprobe_throw on the probe that delivers upump managers (for instance @ref uprobe_pthread_upump_mgr_alloc) with the event @ref UPROBE_FREEZE_UPUMP_MGR.
      @item a worker pipe is created with a pointer to the subpipeline, and takes the place of the subpipeline, from the point of view of the main thread. It is possible to input urefs to the worker pipe (for linear and sink workers), set its output (for linear and source workers), or release it (@ref upipe_release). The worker pipe automatically calls @ref upipe_attach_upump_mgr on relevant pipes of the subpipeline.
      @item After the subpipeline has been created, the upump manager of the main thread may be thawed with @ref UPROBE_THAW_UPUMP_MGR.

    @end list

  @end section

@end section
