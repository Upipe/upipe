#ifndef _UPIPE_MODULES_UPIPE_HBRMT_COMMON_H_
/** @hidden */
#define _UPIPE_MODULES_UPIPE_HBRMT_COMMON_H_
#ifdef __cplusplus
extern "C" {
#endif

#include <bitstream/ietf/rtp.h>
#include <bitstream/ieee/ethernet.h>
#include <bitstream/ietf/ip.h>
#include <bitstream/ietf/udp.h>

#define HBRMT_HEADER_ONLY_SIZE 8
#define HBRMT_DATA_SIZE 1376
#define RAW_HEADER_SIZE (IP_HEADER_MINSIZE + UDP_HEADER_SIZE)
#define HBRMT_DATA_OFFSET (RTP_HEADER_SIZE + HBRMT_HEADER_ONLY_SIZE)
#define HBRMT_LEN (ETHERNET_HEADER_LEN + IP_HEADER_MINSIZE + UDP_HEADER_SIZE + RTP_HEADER_SIZE + HBRMT_HEADER_ONLY_SIZE + HBRMT_DATA_SIZE)

#define UPIPE_SDI_CHROMA_BLANKING_START 16

#define UPIPE_SDI_PSF_IDENT_I   0
#define UPIPE_SDI_PSF_IDENT_PSF 1
#define UPIPE_SDI_PSF_IDENT_P   3

/*
#define SDI_CRC_POLY 0x46001
    for (int i = 0; i < 1024; i++) {
        uint32_t current = i;
        for (int j = 0; j < 10; j++) {
            if (current & 1)
                current ^= SDI_CRC_POLY;
            current >>= 1;
        }
        lut[i] = current;
    }
*/

static const uint32_t sdi_crc_lut[1024] = {
    0x00000, 0x00118, 0x00230, 0x00328, 0x00460, 0x00578, 0x00650, 0x00748,
    0x008c0, 0x009d8, 0x00af0, 0x00be8, 0x00ca0, 0x00db8, 0x00e90, 0x00f88,
    0x01180, 0x01098, 0x013b0, 0x012a8, 0x015e0, 0x014f8, 0x017d0, 0x016c8,
    0x01940, 0x01858, 0x01b70, 0x01a68, 0x01d20, 0x01c38, 0x01f10, 0x01e08,
    0x02300, 0x02218, 0x02130, 0x02028, 0x02760, 0x02678, 0x02550, 0x02448,
    0x02bc0, 0x02ad8, 0x029f0, 0x028e8, 0x02fa0, 0x02eb8, 0x02d90, 0x02c88,
    0x03280, 0x03398, 0x030b0, 0x031a8, 0x036e0, 0x037f8, 0x034d0, 0x035c8,
    0x03a40, 0x03b58, 0x03870, 0x03968, 0x03e20, 0x03f38, 0x03c10, 0x03d08,
    0x04600, 0x04718, 0x04430, 0x04528, 0x04260, 0x04378, 0x04050, 0x04148,
    0x04ec0, 0x04fd8, 0x04cf0, 0x04de8, 0x04aa0, 0x04bb8, 0x04890, 0x04988,
    0x05780, 0x05698, 0x055b0, 0x054a8, 0x053e0, 0x052f8, 0x051d0, 0x050c8,
    0x05f40, 0x05e58, 0x05d70, 0x05c68, 0x05b20, 0x05a38, 0x05910, 0x05808,
    0x06500, 0x06418, 0x06730, 0x06628, 0x06160, 0x06078, 0x06350, 0x06248,
    0x06dc0, 0x06cd8, 0x06ff0, 0x06ee8, 0x069a0, 0x068b8, 0x06b90, 0x06a88,
    0x07480, 0x07598, 0x076b0, 0x077a8, 0x070e0, 0x071f8, 0x072d0, 0x073c8,
    0x07c40, 0x07d58, 0x07e70, 0x07f68, 0x07820, 0x07938, 0x07a10, 0x07b08,
    0x08c00, 0x08d18, 0x08e30, 0x08f28, 0x08860, 0x08978, 0x08a50, 0x08b48,
    0x084c0, 0x085d8, 0x086f0, 0x087e8, 0x080a0, 0x081b8, 0x08290, 0x08388,
    0x09d80, 0x09c98, 0x09fb0, 0x09ea8, 0x099e0, 0x098f8, 0x09bd0, 0x09ac8,
    0x09540, 0x09458, 0x09770, 0x09668, 0x09120, 0x09038, 0x09310, 0x09208,
    0x0af00, 0x0ae18, 0x0ad30, 0x0ac28, 0x0ab60, 0x0aa78, 0x0a950, 0x0a848,
    0x0a7c0, 0x0a6d8, 0x0a5f0, 0x0a4e8, 0x0a3a0, 0x0a2b8, 0x0a190, 0x0a088,
    0x0be80, 0x0bf98, 0x0bcb0, 0x0bda8, 0x0bae0, 0x0bbf8, 0x0b8d0, 0x0b9c8,
    0x0b640, 0x0b758, 0x0b470, 0x0b568, 0x0b220, 0x0b338, 0x0b010, 0x0b108,
    0x0ca00, 0x0cb18, 0x0c830, 0x0c928, 0x0ce60, 0x0cf78, 0x0cc50, 0x0cd48,
    0x0c2c0, 0x0c3d8, 0x0c0f0, 0x0c1e8, 0x0c6a0, 0x0c7b8, 0x0c490, 0x0c588,
    0x0db80, 0x0da98, 0x0d9b0, 0x0d8a8, 0x0dfe0, 0x0def8, 0x0ddd0, 0x0dcc8,
    0x0d340, 0x0d258, 0x0d170, 0x0d068, 0x0d720, 0x0d638, 0x0d510, 0x0d408,
    0x0e900, 0x0e818, 0x0eb30, 0x0ea28, 0x0ed60, 0x0ec78, 0x0ef50, 0x0ee48,
    0x0e1c0, 0x0e0d8, 0x0e3f0, 0x0e2e8, 0x0e5a0, 0x0e4b8, 0x0e790, 0x0e688,
    0x0f880, 0x0f998, 0x0fab0, 0x0fba8, 0x0fce0, 0x0fdf8, 0x0fed0, 0x0ffc8,
    0x0f040, 0x0f158, 0x0f270, 0x0f368, 0x0f420, 0x0f538, 0x0f610, 0x0f708,
    0x11800, 0x11918, 0x11a30, 0x11b28, 0x11c60, 0x11d78, 0x11e50, 0x11f48,
    0x110c0, 0x111d8, 0x112f0, 0x113e8, 0x114a0, 0x115b8, 0x11690, 0x11788,
    0x10980, 0x10898, 0x10bb0, 0x10aa8, 0x10de0, 0x10cf8, 0x10fd0, 0x10ec8,
    0x10140, 0x10058, 0x10370, 0x10268, 0x10520, 0x10438, 0x10710, 0x10608,
    0x13b00, 0x13a18, 0x13930, 0x13828, 0x13f60, 0x13e78, 0x13d50, 0x13c48,
    0x133c0, 0x132d8, 0x131f0, 0x130e8, 0x137a0, 0x136b8, 0x13590, 0x13488,
    0x12a80, 0x12b98, 0x128b0, 0x129a8, 0x12ee0, 0x12ff8, 0x12cd0, 0x12dc8,
    0x12240, 0x12358, 0x12070, 0x12168, 0x12620, 0x12738, 0x12410, 0x12508,
    0x15e00, 0x15f18, 0x15c30, 0x15d28, 0x15a60, 0x15b78, 0x15850, 0x15948,
    0x156c0, 0x157d8, 0x154f0, 0x155e8, 0x152a0, 0x153b8, 0x15090, 0x15188,
    0x14f80, 0x14e98, 0x14db0, 0x14ca8, 0x14be0, 0x14af8, 0x149d0, 0x148c8,
    0x14740, 0x14658, 0x14570, 0x14468, 0x14320, 0x14238, 0x14110, 0x14008,
    0x17d00, 0x17c18, 0x17f30, 0x17e28, 0x17960, 0x17878, 0x17b50, 0x17a48,
    0x175c0, 0x174d8, 0x177f0, 0x176e8, 0x171a0, 0x170b8, 0x17390, 0x17288,
    0x16c80, 0x16d98, 0x16eb0, 0x16fa8, 0x168e0, 0x169f8, 0x16ad0, 0x16bc8,
    0x16440, 0x16558, 0x16670, 0x16768, 0x16020, 0x16138, 0x16210, 0x16308,
    0x19400, 0x19518, 0x19630, 0x19728, 0x19060, 0x19178, 0x19250, 0x19348,
    0x19cc0, 0x19dd8, 0x19ef0, 0x19fe8, 0x198a0, 0x199b8, 0x19a90, 0x19b88,
    0x18580, 0x18498, 0x187b0, 0x186a8, 0x181e0, 0x180f8, 0x183d0, 0x182c8,
    0x18d40, 0x18c58, 0x18f70, 0x18e68, 0x18920, 0x18838, 0x18b10, 0x18a08,
    0x1b700, 0x1b618, 0x1b530, 0x1b428, 0x1b360, 0x1b278, 0x1b150, 0x1b048,
    0x1bfc0, 0x1bed8, 0x1bdf0, 0x1bce8, 0x1bba0, 0x1bab8, 0x1b990, 0x1b888,
    0x1a680, 0x1a798, 0x1a4b0, 0x1a5a8, 0x1a2e0, 0x1a3f8, 0x1a0d0, 0x1a1c8,
    0x1ae40, 0x1af58, 0x1ac70, 0x1ad68, 0x1aa20, 0x1ab38, 0x1a810, 0x1a908,
    0x1d200, 0x1d318, 0x1d030, 0x1d128, 0x1d660, 0x1d778, 0x1d450, 0x1d548,
    0x1dac0, 0x1dbd8, 0x1d8f0, 0x1d9e8, 0x1dea0, 0x1dfb8, 0x1dc90, 0x1dd88,
    0x1c380, 0x1c298, 0x1c1b0, 0x1c0a8, 0x1c7e0, 0x1c6f8, 0x1c5d0, 0x1c4c8,
    0x1cb40, 0x1ca58, 0x1c970, 0x1c868, 0x1cf20, 0x1ce38, 0x1cd10, 0x1cc08,
    0x1f100, 0x1f018, 0x1f330, 0x1f228, 0x1f560, 0x1f478, 0x1f750, 0x1f648,
    0x1f9c0, 0x1f8d8, 0x1fbf0, 0x1fae8, 0x1fda0, 0x1fcb8, 0x1ff90, 0x1fe88,
    0x1e080, 0x1e198, 0x1e2b0, 0x1e3a8, 0x1e4e0, 0x1e5f8, 0x1e6d0, 0x1e7c8,
    0x1e840, 0x1e958, 0x1ea70, 0x1eb68, 0x1ec20, 0x1ed38, 0x1ee10, 0x1ef08,
    0x23000, 0x23118, 0x23230, 0x23328, 0x23460, 0x23578, 0x23650, 0x23748,
    0x238c0, 0x239d8, 0x23af0, 0x23be8, 0x23ca0, 0x23db8, 0x23e90, 0x23f88,
    0x22180, 0x22098, 0x223b0, 0x222a8, 0x225e0, 0x224f8, 0x227d0, 0x226c8,
    0x22940, 0x22858, 0x22b70, 0x22a68, 0x22d20, 0x22c38, 0x22f10, 0x22e08,
    0x21300, 0x21218, 0x21130, 0x21028, 0x21760, 0x21678, 0x21550, 0x21448,
    0x21bc0, 0x21ad8, 0x219f0, 0x218e8, 0x21fa0, 0x21eb8, 0x21d90, 0x21c88,
    0x20280, 0x20398, 0x200b0, 0x201a8, 0x206e0, 0x207f8, 0x204d0, 0x205c8,
    0x20a40, 0x20b58, 0x20870, 0x20968, 0x20e20, 0x20f38, 0x20c10, 0x20d08,
    0x27600, 0x27718, 0x27430, 0x27528, 0x27260, 0x27378, 0x27050, 0x27148,
    0x27ec0, 0x27fd8, 0x27cf0, 0x27de8, 0x27aa0, 0x27bb8, 0x27890, 0x27988,
    0x26780, 0x26698, 0x265b0, 0x264a8, 0x263e0, 0x262f8, 0x261d0, 0x260c8,
    0x26f40, 0x26e58, 0x26d70, 0x26c68, 0x26b20, 0x26a38, 0x26910, 0x26808,
    0x25500, 0x25418, 0x25730, 0x25628, 0x25160, 0x25078, 0x25350, 0x25248,
    0x25dc0, 0x25cd8, 0x25ff0, 0x25ee8, 0x259a0, 0x258b8, 0x25b90, 0x25a88,
    0x24480, 0x24598, 0x246b0, 0x247a8, 0x240e0, 0x241f8, 0x242d0, 0x243c8,
    0x24c40, 0x24d58, 0x24e70, 0x24f68, 0x24820, 0x24938, 0x24a10, 0x24b08,
    0x2bc00, 0x2bd18, 0x2be30, 0x2bf28, 0x2b860, 0x2b978, 0x2ba50, 0x2bb48,
    0x2b4c0, 0x2b5d8, 0x2b6f0, 0x2b7e8, 0x2b0a0, 0x2b1b8, 0x2b290, 0x2b388,
    0x2ad80, 0x2ac98, 0x2afb0, 0x2aea8, 0x2a9e0, 0x2a8f8, 0x2abd0, 0x2aac8,
    0x2a540, 0x2a458, 0x2a770, 0x2a668, 0x2a120, 0x2a038, 0x2a310, 0x2a208,
    0x29f00, 0x29e18, 0x29d30, 0x29c28, 0x29b60, 0x29a78, 0x29950, 0x29848,
    0x297c0, 0x296d8, 0x295f0, 0x294e8, 0x293a0, 0x292b8, 0x29190, 0x29088,
    0x28e80, 0x28f98, 0x28cb0, 0x28da8, 0x28ae0, 0x28bf8, 0x288d0, 0x289c8,
    0x28640, 0x28758, 0x28470, 0x28568, 0x28220, 0x28338, 0x28010, 0x28108,
    0x2fa00, 0x2fb18, 0x2f830, 0x2f928, 0x2fe60, 0x2ff78, 0x2fc50, 0x2fd48,
    0x2f2c0, 0x2f3d8, 0x2f0f0, 0x2f1e8, 0x2f6a0, 0x2f7b8, 0x2f490, 0x2f588,
    0x2eb80, 0x2ea98, 0x2e9b0, 0x2e8a8, 0x2efe0, 0x2eef8, 0x2edd0, 0x2ecc8,
    0x2e340, 0x2e258, 0x2e170, 0x2e068, 0x2e720, 0x2e638, 0x2e510, 0x2e408,
    0x2d900, 0x2d818, 0x2db30, 0x2da28, 0x2dd60, 0x2dc78, 0x2df50, 0x2de48,
    0x2d1c0, 0x2d0d8, 0x2d3f0, 0x2d2e8, 0x2d5a0, 0x2d4b8, 0x2d790, 0x2d688,
    0x2c880, 0x2c998, 0x2cab0, 0x2cba8, 0x2cce0, 0x2cdf8, 0x2ced0, 0x2cfc8,
    0x2c040, 0x2c158, 0x2c270, 0x2c368, 0x2c420, 0x2c538, 0x2c610, 0x2c708,
    0x32800, 0x32918, 0x32a30, 0x32b28, 0x32c60, 0x32d78, 0x32e50, 0x32f48,
    0x320c0, 0x321d8, 0x322f0, 0x323e8, 0x324a0, 0x325b8, 0x32690, 0x32788,
    0x33980, 0x33898, 0x33bb0, 0x33aa8, 0x33de0, 0x33cf8, 0x33fd0, 0x33ec8,
    0x33140, 0x33058, 0x33370, 0x33268, 0x33520, 0x33438, 0x33710, 0x33608,
    0x30b00, 0x30a18, 0x30930, 0x30828, 0x30f60, 0x30e78, 0x30d50, 0x30c48,
    0x303c0, 0x302d8, 0x301f0, 0x300e8, 0x307a0, 0x306b8, 0x30590, 0x30488,
    0x31a80, 0x31b98, 0x318b0, 0x319a8, 0x31ee0, 0x31ff8, 0x31cd0, 0x31dc8,
    0x31240, 0x31358, 0x31070, 0x31168, 0x31620, 0x31738, 0x31410, 0x31508,
    0x36e00, 0x36f18, 0x36c30, 0x36d28, 0x36a60, 0x36b78, 0x36850, 0x36948,
    0x366c0, 0x367d8, 0x364f0, 0x365e8, 0x362a0, 0x363b8, 0x36090, 0x36188,
    0x37f80, 0x37e98, 0x37db0, 0x37ca8, 0x37be0, 0x37af8, 0x379d0, 0x378c8,
    0x37740, 0x37658, 0x37570, 0x37468, 0x37320, 0x37238, 0x37110, 0x37008,
    0x34d00, 0x34c18, 0x34f30, 0x34e28, 0x34960, 0x34878, 0x34b50, 0x34a48,
    0x345c0, 0x344d8, 0x347f0, 0x346e8, 0x341a0, 0x340b8, 0x34390, 0x34288,
    0x35c80, 0x35d98, 0x35eb0, 0x35fa8, 0x358e0, 0x359f8, 0x35ad0, 0x35bc8,
    0x35440, 0x35558, 0x35670, 0x35768, 0x35020, 0x35138, 0x35210, 0x35308,
    0x3a400, 0x3a518, 0x3a630, 0x3a728, 0x3a060, 0x3a178, 0x3a250, 0x3a348,
    0x3acc0, 0x3add8, 0x3aef0, 0x3afe8, 0x3a8a0, 0x3a9b8, 0x3aa90, 0x3ab88,
    0x3b580, 0x3b498, 0x3b7b0, 0x3b6a8, 0x3b1e0, 0x3b0f8, 0x3b3d0, 0x3b2c8,
    0x3bd40, 0x3bc58, 0x3bf70, 0x3be68, 0x3b920, 0x3b838, 0x3bb10, 0x3ba08,
    0x38700, 0x38618, 0x38530, 0x38428, 0x38360, 0x38278, 0x38150, 0x38048,
    0x38fc0, 0x38ed8, 0x38df0, 0x38ce8, 0x38ba0, 0x38ab8, 0x38990, 0x38888,
    0x39680, 0x39798, 0x394b0, 0x395a8, 0x392e0, 0x393f8, 0x390d0, 0x391c8,
    0x39e40, 0x39f58, 0x39c70, 0x39d68, 0x39a20, 0x39b38, 0x39810, 0x39908,
    0x3e200, 0x3e318, 0x3e030, 0x3e128, 0x3e660, 0x3e778, 0x3e450, 0x3e548,
    0x3eac0, 0x3ebd8, 0x3e8f0, 0x3e9e8, 0x3eea0, 0x3efb8, 0x3ec90, 0x3ed88,
    0x3f380, 0x3f298, 0x3f1b0, 0x3f0a8, 0x3f7e0, 0x3f6f8, 0x3f5d0, 0x3f4c8,
    0x3fb40, 0x3fa58, 0x3f970, 0x3f868, 0x3ff20, 0x3fe38, 0x3fd10, 0x3fc08,
    0x3c100, 0x3c018, 0x3c330, 0x3c228, 0x3c560, 0x3c478, 0x3c750, 0x3c648,
    0x3c9c0, 0x3c8d8, 0x3cbf0, 0x3cae8, 0x3cda0, 0x3ccb8, 0x3cf90, 0x3ce88,
    0x3d080, 0x3d198, 0x3d2b0, 0x3d3a8, 0x3d4e0, 0x3d5f8, 0x3d6d0, 0x3d7c8,
    0x3d840, 0x3d958, 0x3da70, 0x3db68, 0x3dc20, 0x3dd38, 0x3de10, 0x3df08,
};

/* Fixme: move to the shared upipe file and detect compiler version
 * (FFmpeg uses GNU_C version of at least 3.1) */
#define upipe_always_inline __attribute__((always_inline)) inline

static upipe_always_inline void sdi_crc_update(uint32_t *crc, uint16_t data)
{
    const uint32_t c = *crc;
    *crc = (c >> 10) ^ sdi_crc_lut[(c ^ data) & 0x3ff];
}

#define NOT_BIT8(x) ((!(((x) >> 8) & 1)) << 9)

static inline void sdi_crc_end(uint32_t *crc_c, uint16_t *dst)
{
    uint16_t crc0, crc1;

    uint32_t crc = *crc_c;
    *crc_c = 0;

    crc0  = crc & 0x1ff;
    crc0 |= NOT_BIT8(crc0);
    crc1  = (crc >> 9) & 0x1ff;
    crc1 |= NOT_BIT8(crc1);

    dst[0] = crc0;
    dst[2] = crc1;
}

struct sdi_line_range {
    uint16_t start;
    uint16_t end;
};

struct sdi_picture_fmt {
    /* Active picture dimensions */
    uint16_t active_width;
    uint16_t active_height;
    
    /* Offset between fields */
    uint16_t field_offset;

    /* SMPTE RP168 Switch Line */
    uint16_t switching_line;

    /* SMPTE 352 Payload ID line */
    uint16_t payload_id_line;

    /* Field 1 (interlaced) or Frame (progressive) line ranges */
    struct sdi_line_range vbi_f1_part1;
    struct sdi_line_range active_f1;
    struct sdi_line_range vbi_f1_part2;

    /* Field 2 (interlaced)  */
    struct sdi_line_range vbi_f2_part1;
    struct sdi_line_range active_f2;
    struct sdi_line_range vbi_f2_part2;
};

struct sdi_offsets_fmt {
    /* Full SDI width and height */
    uint16_t width;
    uint16_t height;
 
    /* Number of samples between SAV and start of active data */
    uint16_t active_offset;

    const struct sdi_picture_fmt *pict_fmt;

    /* 0x0 (Interlace), 0x1 (Segmented frame), 0x3 (Progressive) */
    uint8_t psf_ident;

    /* frame_rate
     * 0x0 Undefined
     * 0x1 Reserved
     * 0x2 24/1.001Hz
     * 0x3 24Hz
     * 0x4 Reserved
     * 0x5 25Hz
     * 0x6 30/1.001 Hz
     * 0x7 30Hz
     * 0x8 Reserved
     * 0x9 50Hz
     * 0xA 60/1.001 Hz
     */
    uint8_t frame_rate;

    struct urational fps;
};

static inline const struct sdi_offsets_fmt *sdi_get_offsets(struct urational *fps)
{
    static const struct sdi_picture_fmt pict_fmts[3] = {
        /* 1125 Interlaced (1080 active) lines */
        {1920, 1080, 562, 7, 10, {1, 20}, {21, 560}, {561, 563}, {564, 583}, {584, 1123}, {1124, 1125}},
        /* 1125 Progressive (1080 active) lines */
        {1920, 1080, 0, 7, 10, {1, 41}, {42, 1121}, {1122, 1125}, {0, 0}, {0, 0}, {0, 0}},
        /* PAL */
        {720, 576, 313, 6, 9, {1, 22}, {23, 260}, {561, 563}, {564, 583}, {336, 1123}, {1124, 1125}},
    };

    static const struct sdi_offsets_fmt fmts_data[7] = {
        { 2640, 1125, 720, &pict_fmts[0], 0x0, 0x5, { 25, 1} },        /* 25 Hz I */
        { 2640, 1125, 720, &pict_fmts[1], 0x3, 0x9, { 50, 1} },        /* 50 Hz P */

        { 2200, 1125, 280, &pict_fmts[0], 0x0, 0x6, { 30000, 1001 } }, /* 30/1.001 Hz I */
        { 2200, 1125, 280, &pict_fmts[1], 0x3, 0xA, { 60000, 1001 } }, /* 60/1.001 Hz P */

        { 2750, 1125, 830, &pict_fmts[0], 0x3, 0x2, { 24000, 1001 } }, /* 24/1.001 Hz */
        { 2750, 1125, 830, &pict_fmts[0], 0x3, 0x3, { 24, 1 } },       /* 24 Hz */

        {  864,  625, 144, &pict_fmts[2], 0x0, 0x5, { 25, 1} },        /* 625-line 25 Hz I */
    };

    for (size_t i = 0; i < sizeof(fmts_data) / sizeof(struct sdi_offsets_fmt); i++)
        if (!urational_cmp(fps, &fmts_data[i].fps))
            return &fmts_data[i];

    return NULL;
}

#ifdef __cplusplus
}
#endif
#endif
